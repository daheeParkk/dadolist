<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.repository.UserMapper">

    <resultMap id="userResultMap" type="org.example.domain.User">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
        <result column="is_deleted" property="isDeleted" />
    </resultMap>

    <update id="createAdmin">
        update user set
                        authority = #{checkAdmin}
        where id = #{id}
    </update>

    <insert id="createUser" parameterType="org.example.domain.User">
        insert into user
            (name, nickname, user_id, password, email)
        values (#{name}, #{nickname}, #{userId}, #{password}, #{email})
        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="countUserIdByUserId" resultType="java.lang.Integer">
        select count(user_id)
        from user
        where user_id = #{userId} and is_deleted = false limit 1
    </select>

    <select id="countNicknameByNickname" resultType="java.lang.Integer">
        select count(nickname)
        from user
        where nickname = #{nickname} and is_deleted = false limit 1
    </select>

    <select id="selectUserByUserId" resultMap="userResultMap">
        select *
        from user
        where user_id = #{userId} and is_deleted = false
    </select>

    <update id="softDelete">
        update user set
                        is_deleted = #{isDeleted}
        where id = #{id}
    </update>

    <update id="updateUser" parameterType="org.example.domain.User">
        update user set
                        name = #{name},
                        nickname = #{nickname},
                        user_id = #{userId},
                        password = #{password},
                        email = #{email}
        where id = #{id}
    </update>

    <select id="getUser" resultMap="userResultMap">
        select * from user where is_deleted = false
    </select>

    <select id="selectUser" parameterType="java.lang.Long" resultMap="userResultMap">
        select u.id, u.name, u.nickname, u.user_id, password, email, t.name, authority, u.created_at, u.updated_at, u.is_deleted
        from user u left outer join team_user_mapping tum on u.id = tum.user_id
                    left outer join team t on t.id = tum.team_id
        where u.id = #{id} and u.is_deleted = false
    </select>

</mapper>