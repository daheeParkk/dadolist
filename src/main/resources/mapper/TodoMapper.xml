<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.repository.TodoMapper">

    <resultMap id="todoResultMap" type="org.example.domain.Todo">
        <id column="id" property="id" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
        <result column="is_deleted" property="isDeleted" />

    </resultMap>

    <insert id="writeTodo" parameterType="org.example.domain.Todo">
        insert into todo
            (content, deadline, category_id)
        values (#{content}, #{deadline}, #{categoryId})
        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="getTodo" resultMap="todoResultMap">
        select * from todo
        where id = #{todoId} and is_deleted = false
    </select>

    <select id="getTodoList" resultMap="todoResultMap">
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join todo_user_mapping tum on t.id = tum.todo_id and tum.user_id = #{userId}
        where t.is_deleted = false
        union
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join team_user_mapping teum on teum.team_id = te.id and teum.user_id = #{userId}
        where t.is_deleted = false
    </select>

    <select id="getTeamTodoListByTeamId" resultMap="todoResultMap">
        select t.id, te.id as teamId, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 join team te on t.team_id = te.id and te.id = #{teamId}
        where t.is_deleted = false
    </select>
    
    <select id="getTeamTodoListByTeamName" resultMap="todoResultMap">
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 join team te on t.team_id = te.id and te.name = #{teamName}
        where t.is_deleted = false
    </select>

    <select id="getTodoListByMonth" resultMap="todoResultMap">
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join todo_user_mapping tum on t.id = tum.todo_id and tum.user_id = #{userId}
        where month(deadline) = #{month} and t.is_deleted = false
        union
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join team_user_mapping teum on teum.team_id = te.id and teum.user_id = #{userId}
        where month(deadline) = #{month} and t.is_deleted = false
    </select>

    <select id="getTodoListByDays" resultMap="todoResultMap">
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join todo_user_mapping tum on t.id = tum.todo_id and tum.user_id = #{userId}
        where month(deadline) = #{month} and day(deadline) = #{days} and t.is_deleted = false
        union
        select t.id, te.name as team, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join team_user_mapping teum on teum.team_id = te.id and teum.user_id = #{userId}
        where month(deadline) = #{month} and day(deadline) = #{days} and t.is_deleted = false
    </select>

    <select id="getTodoListByCategory" resultMap="todoResultMap">
        select t.id, te.name as name, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join todo_user_mapping tum on t.id = tum.todo_id and tum.user_id = #{userId}
        where c.content = #{category} and t.is_deleted = false
        union
        select t.id, te.name as name, t.content, t.deadline, c.content as category, t.category_id, t.created_at, t.updated_at, t.is_deleted
        from todo t
                 left outer join category c on t.category_id = c.id
                 left outer join team te on t.team_id = te.id
                 join team_user_mapping teum on teum.team_id = te.id and teum.user_id = #{userId}
        where c.content = #{category} and t.is_deleted = false
    </select>

    <update id="updateTodo" parameterType="org.example.domain.Todo">
        update todo set
                        content = #{content},
                        deadline = #{deadline},
                        category_id = #{categoryId},
                        team_id = #{teamId}
        where id = #{id}
    </update>

    <update id="softDelete">
        update todo set
                        is_deleted = #{isDeleted}
        where id = #{id}
    </update>

    <insert id="teamWriteTodo">
        insert into todo
            (content, deadline, category_id, team_id)
        values (#{content}, #{deadline}, #{categoryId}, #{teamId})
    </insert>

</mapper>